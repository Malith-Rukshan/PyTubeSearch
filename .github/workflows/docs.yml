name: Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  docs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements/dev.txt

    - name: Check documentation links
      run: |
        # Check if README.md has any broken internal links
        python -c "
        import re
        with open('README.md') as f:
            content = f.read()
            # Find all markdown links
            links = re.findall(r'\[([^\]]+)\]\(([^)]+)\)', content)
            for text, link in links:
                if link.startswith('#'):
                    continue  # Skip anchors
                if link.startswith('http'):
                    continue  # Skip external links
                # Check if internal file exists
                import os
                if not os.path.exists(link):
                    print(f'Broken link: {text} -> {link}')
        "

    - name: Validate examples
      run: |
        # Check that all example files are syntactically correct
        python -m py_compile examples/*.py

    - name: Generate API documentation
      run: |
        # Generate simple API docs
        python -c "
        import inspect
        import pytubesearch
        
        # Get all public classes and functions
        members = inspect.getmembers(pytubesearch)
        public_members = [(name, obj) for name, obj in members if not name.startswith('_')]
        
        with open('API_REFERENCE.md', 'w') as f:
            f.write('# API Reference\n\n')
            f.write('Auto-generated API documentation for PyTubeSearch.\n\n')
            
            for name, obj in public_members:
                if inspect.isclass(obj):
                    f.write(f'## {name}\n\n')
                    if obj.__doc__:
                        f.write(f'{obj.__doc__}\n\n')
                    
                    # Get methods
                    methods = inspect.getmembers(obj, predicate=inspect.ismethod)
                    for method_name, method in methods:
                        if not method_name.startswith('_'):
                            f.write(f'### {method_name}\n\n')
                            if method.__doc__:
                                f.write(f'{method.__doc__}\n\n')
        "

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: |
          README.md
          API_REFERENCE.md
          examples/